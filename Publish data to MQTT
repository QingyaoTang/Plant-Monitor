#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#define SECRET_SSID "CE-Hub-Student"
#define SECRET_PASS "casa-ce-gagarin-public-service"
#define SECRET_MQTTUSER "student"
#define SECRET_MQTTPASS "ce2021-mqtt-forget-whale";


const char* ssid     = SECRET_SSID; // Use WiFi credentials from the secrets file
const char* password = SECRET_PASS; // Use WiFi credentials from the secrets file

const char* mqtt_server = "mqtt.cetools.org";

WiFiClient espClient; 
PubSubClient client(espClient);
long lastMsg = 0;
char msg[50]; 
int value = 0;
void setup() {

  // Open a serial connection via WiFi to the MQTT broker
  Serial.begin(115200);
  delay(100); // Allow time for the serial connection to open

  // Initialize WiFi connection
  startWifi();
  pinMode(BUILTIN_LED, OUTPUT); 
digitalWrite(BUILTIN_LED, HIGH);
  // Once connected to WiFi, establish a connection to the MQTT broker
  client.setServer(mqtt_server, 1884);

  // Set up a callback to listen for LED control instructions
  client.setCallback(callback);
}
void loop() {
  delay(5000);
  sendMQTT();
  
}

// This function is used to set up the WiFi connection
void startWifi() {
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);

  // Check if connected and wait until the connection is established
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
}

// This function ensures that the Arduino is connected to an MQTT broker
void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);

    // Attempt to connect
    if (client.connect(clientId.c_str(), SECRET_MQTTUSER, SECRET_MQTTPASS)) {
      Serial.println("connected");
      // Subscribe to messages on the broker
      client.subscribe("student/CASA0014/plant/ucbvqt1/inTopic");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}
void sendMQTT() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
  ++value;
  snprintf(msg, 50, "hello world #%ld", value);
  Serial.print("Publish message: ");
  Serial.println(msg);
  client.publish("student/CASA0014/plant/ucbvqt1", msg);
}

// The callback function is called when an incoming message is received from the MQTT broker
void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();
  // Switch on the LED if the first character of the message is "1"
  if ((char)payload[0] == '1') {
    digitalWrite(BUILTIN_LED, LOW); // Turn the LED on
  } else {
    digitalWrite(BUILTIN_LED, HIGH); // Turn the LED off
  }
}
